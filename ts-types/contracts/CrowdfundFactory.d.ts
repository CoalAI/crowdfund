/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface CrowdfundFactoryInterface extends ethers.utils.Interface {
  functions: {
    "createCrowdfund(string,string,address,uint256,uint256)": FunctionFragment;
    "logic()": FunctionFragment;
    "mediaAddress()": FunctionFragment;
    "parameters()": FunctionFragment;
    "wethAddress()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createCrowdfund",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "logic", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mediaAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "parameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wethAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createCrowdfund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "logic", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mediaAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "parameters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wethAddress",
    data: BytesLike
  ): Result;

  events: {
    "CrowdfundDeployed(address,string,string,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CrowdfundDeployed"): EventFragment;
}

export class CrowdfundFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: CrowdfundFactoryInterface;

  functions: {
    createCrowdfund(
      name_: string,
      symbol_: string,
      operator_: string,
      fundingCap_: BigNumberish,
      operatorPercent_: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createCrowdfund(string,string,address,uint256,uint256)"(
      name_: string,
      symbol_: string,
      operator_: string,
      fundingCap_: BigNumberish,
      operatorPercent_: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logic(overrides?: CallOverrides): Promise<[string]>;

    "logic()"(overrides?: CallOverrides): Promise<[string]>;

    mediaAddress(overrides?: CallOverrides): Promise<[string]>;

    "mediaAddress()"(overrides?: CallOverrides): Promise<[string]>;

    parameters(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, string] & {
        operator: string;
        fundingCap: BigNumber;
        operatorPercent: BigNumber;
        name: string;
        symbol: string;
      }
    >;

    "parameters()"(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, string] & {
        operator: string;
        fundingCap: BigNumber;
        operatorPercent: BigNumber;
        name: string;
        symbol: string;
      }
    >;

    wethAddress(overrides?: CallOverrides): Promise<[string]>;

    "wethAddress()"(overrides?: CallOverrides): Promise<[string]>;
  };

  createCrowdfund(
    name_: string,
    symbol_: string,
    operator_: string,
    fundingCap_: BigNumberish,
    operatorPercent_: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createCrowdfund(string,string,address,uint256,uint256)"(
    name_: string,
    symbol_: string,
    operator_: string,
    fundingCap_: BigNumberish,
    operatorPercent_: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logic(overrides?: CallOverrides): Promise<string>;

  "logic()"(overrides?: CallOverrides): Promise<string>;

  mediaAddress(overrides?: CallOverrides): Promise<string>;

  "mediaAddress()"(overrides?: CallOverrides): Promise<string>;

  parameters(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string, string] & {
      operator: string;
      fundingCap: BigNumber;
      operatorPercent: BigNumber;
      name: string;
      symbol: string;
    }
  >;

  "parameters()"(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string, string] & {
      operator: string;
      fundingCap: BigNumber;
      operatorPercent: BigNumber;
      name: string;
      symbol: string;
    }
  >;

  wethAddress(overrides?: CallOverrides): Promise<string>;

  "wethAddress()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createCrowdfund(
      name_: string,
      symbol_: string,
      operator_: string,
      fundingCap_: BigNumberish,
      operatorPercent_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "createCrowdfund(string,string,address,uint256,uint256)"(
      name_: string,
      symbol_: string,
      operator_: string,
      fundingCap_: BigNumberish,
      operatorPercent_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    logic(overrides?: CallOverrides): Promise<string>;

    "logic()"(overrides?: CallOverrides): Promise<string>;

    mediaAddress(overrides?: CallOverrides): Promise<string>;

    "mediaAddress()"(overrides?: CallOverrides): Promise<string>;

    parameters(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, string] & {
        operator: string;
        fundingCap: BigNumber;
        operatorPercent: BigNumber;
        name: string;
        symbol: string;
      }
    >;

    "parameters()"(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, string] & {
        operator: string;
        fundingCap: BigNumber;
        operatorPercent: BigNumber;
        name: string;
        symbol: string;
      }
    >;

    wethAddress(overrides?: CallOverrides): Promise<string>;

    "wethAddress()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    CrowdfundDeployed(
      crowdfundProxy: null,
      name: null,
      symbol: null,
      operator: null
    ): EventFilter;
  };

  estimateGas: {
    createCrowdfund(
      name_: string,
      symbol_: string,
      operator_: string,
      fundingCap_: BigNumberish,
      operatorPercent_: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createCrowdfund(string,string,address,uint256,uint256)"(
      name_: string,
      symbol_: string,
      operator_: string,
      fundingCap_: BigNumberish,
      operatorPercent_: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logic(overrides?: CallOverrides): Promise<BigNumber>;

    "logic()"(overrides?: CallOverrides): Promise<BigNumber>;

    mediaAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "mediaAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    parameters(overrides?: CallOverrides): Promise<BigNumber>;

    "parameters()"(overrides?: CallOverrides): Promise<BigNumber>;

    wethAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "wethAddress()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createCrowdfund(
      name_: string,
      symbol_: string,
      operator_: string,
      fundingCap_: BigNumberish,
      operatorPercent_: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createCrowdfund(string,string,address,uint256,uint256)"(
      name_: string,
      symbol_: string,
      operator_: string,
      fundingCap_: BigNumberish,
      operatorPercent_: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "logic()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mediaAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mediaAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parameters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "parameters()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wethAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wethAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
